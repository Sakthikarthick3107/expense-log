name: Flutter APK Build and Deploy

on:
  push:
    branches:
      - main  # You can change this to your main development branch

jobs:
  build-apk:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read Release Notes
        id: notes
        run: echo "::set-output name=notes::$(cat RELEASE_NOTES.txt)"

      # Step 2: Set up Flutter environment
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.3'  # Use your specific Flutter version

      # Step 3: Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Step 4: Extract version from pubspec.yaml
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          VERSION=$(grep '^version: ' pubspec.yaml | sed 's/version: //g')
          VERSION_TAG="v${VERSION%%+*}" # Use only the version part, ignoring build number after '+'
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV      

      # Step 5: Decode and set up keystore
      - name: Decode and set up keystore
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "$KEYSTORE_FILE" | base64 --decode > android/app/my-release-key.jks
          echo "storePassword=$KEYSTORE_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
          echo "storeFile=../app/my-release-key.jks" >> android/key.properties

      # Step 6: Build APK
      - name: Build APK
        run: flutter build apk --release

      # Step 7: Upload APK to GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION_TAG }}
          release_name: Release ${{ env.VERSION_TAG }}

          draft: false
          prerelease: false

      # Step 8: Upload APK to the release
      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-release.apk
          asset_name: expense_log.apk
          asset_content_type: application/vnd.android.package-archive

  build-windows:
    runs-on: windows-latest


    steps:
      # Checkout the code
      - uses: actions/checkout@v3

      # Set up Flutter for Windows
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.3'

      # Install dependencies for Windows
      - name: Install Dependencies
        run: flutter pub get

      # Extract version from pubspec.yaml
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          VERSION=$(grep '^version: ' pubspec.yaml | sed 's/version: //g')
          VERSION_TAG="v${VERSION%%+*}" # Use only the version part, ignoring build number after '+'
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      # Build Windows App
      - name: Build Windows App
        run: flutter build windows

      # Create GitHub Release (if you want to create a release for the Windows app as well)
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION_TAG }}
          release_name: Release ${{ env.VERSION_TAG }}
          draft: false
          prerelease: false

      # Upload Windows Executable to the Release
      - name: Upload Windows Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/windows/runner/Release/*.exe
          asset_name: expense_log_windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable
