name: Flutter Build and Deploy

on:
  push:
    branches:
      - main 

jobs:
  build-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read Release Notes
        id: notes
        run: |
          RELEASE_NOTES=$(cat RELEASE_NOTES.txt)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV


      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.3'  

      - name: Install dependencies
        run: flutter pub get
      
      - name: Clean Flutter build
        run: flutter clean


      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          VERSION=$(grep '^version: ' pubspec.yaml | sed 's/version: //g')
          VERSION_TAG="v${VERSION%%+*}" # Use only the version part, ignoring build number after '+'
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV      

      - name: Decode and set up keystore
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "$KEYSTORE_FILE" | base64 --decode > android/app/my-release-key.jks
          echo "storePassword=$KEYSTORE_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
          echo "storeFile=../app/my-release-key.jks" >> android/key.properties

      - name: Build APK
        run: flutter build apk --release

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION_TAG }}
          name: Release ${{ env.VERSION_TAG }}
          body_path: RELEASE_NOTES.txt
          draft: false
          prerelease: false

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-release.apk
          asset_name: expense_log.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Output Upload URL
        run: echo "UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV

      - name: Save upload_url to file
        run: echo "${{ steps.create_release.outputs.upload_url }}" > upload_url.txt

      - name: Upload upload_url.txt
        uses: actions/upload-artifact@v4
        with:
         name: upload_url_file
         path: upload_url.txt

  build-ios:
   name: Build iOS
   runs-on: macos-latest
   needs: build-apk

   steps:
     - name: Checkout code
       uses: actions/checkout@v2

     - name: Set up Flutter
       uses: subosito/flutter-action@v2
       with:
         flutter-version: '3.22.3'

     - name: Install CocoaPods
       run: |
         sudo gem install cocoapods
         pod repo update

     - name: Install dependencies
       run: flutter pub get

     - name: Install iOS dependencies
       run: |
         cd ios
         pod install
         cd ..

     - name: Build iOS App
       run: flutter build ios --release --no-codesign

     - name: Archive and Export IPA
       run: |
         mkdir Payload
         cp -r build/ios/iphoneos/Runner.app Payload/
         cd Payload
         zip -r ../Runner.ipa .
         cd ..

     - name: Download upload_url.txt
       uses: actions/download-artifact@v4
       with:
         name: upload_url_file

     - name: Read upload_url into ENV
       run: echo "UPLOAD_URL=$(cat upload_url.txt)" >> $GITHUB_ENV


     - name: Upload IPA to Release
       uses: actions/upload-release-asset@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         upload_url: ${{ env.UPLOAD_URL }}
         asset_path: Runner.ipa
         asset_name: expense_log_ios.ipa
         asset_content_type: application/octet-stream

#  build-windows:
#    runs-on: windows-latest
#    needs: build-apk
#
#    steps:
#      # Checkout the code
#      - uses: actions/checkout@v3
#
#      # Set up Flutter for Windows
#      - name: Set up Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          flutter-version: '3.22.3'
#
#      # Install dependencies for Windows
#      - name: Install Dependencies
#        run: flutter pub get
#
#          # Extract version from pubspec.yaml using PowerShell
#      - name: Extract version from pubspec.yaml
#        id: extract_version
#        run: |
#              # PowerShell version extraction
#              $version = (Select-String '^version: ' pubspec.yaml).Line -replace '^version: ', ''
#              $version_tag = "v" + $version.Split('+')[0]  # Get version without build number
#              echo "VERSION=$version" >> $env:GITHUB_ENV
#              echo "VERSION_TAG=$version_tag" >> $env:GITHUB_ENV
#
#
#      # Build Windows App
#      - name: Build Windows App
#        run: flutter build windows
#
#      # Upload Windows Executable to the Release
#      - name: Upload Windows Executable to Release
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ env.UPLOAD_URL }}
#          asset_path: build\windows\x64\runner\Release\expense_log.exe
#          asset_name: expense_log_windows.exe
#          asset_content_type: application/vnd.microsoft.portable-executable
